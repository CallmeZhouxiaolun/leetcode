Given a sorted integer array without duplicates, return the summary of its ranges.

Example 1:

Input:  [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Explanation: 0,1,2 form a continuous range; 4,5 form a continuous range.
Example 2:

Input:  [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
Explanation: 2,3,4 form a continuous range; 8,9 form a continuous range.

class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        vector<string> res;
        for(int i=0; i<nums.size(); i++){
            int pre = nums[i];
            while(i+1<nums.size() && nums[i+1]-1 == nums[i])
                i++;
            if(pre==nums[i])
                res.push_back(to_string(nums[i]));
            else
                res.push_back(to_string(pre)+"->"+to_string(nums[i]));
        }
        return res;
    }
};



做题前需要深思熟虑，仔细想想怎么做，不要急于下笔

思路：
 采用双指针的思想，寻找range的上下限，之后再生成对应的string
class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        vector<string> res;
        if(nums.empty())
            return res;
        string s="";
        int left =0, right=1;
        while(right < nums.size()){
            if(nums[right] == nums[right-1]+1)
                 right++;
            else{
                if(right -left >1){
                    s += to_string(nums[left]) + "->"+ to_string(nums[right-1]);
                }else{
                    s += to_string(nums[left]);
                }
                res.push_back(s);
                s = "";
                left = right++;
            }
        }
        if(right -left >1){
            s += to_string(nums[left]) + "->"+ to_string(nums[right-1]);
        }else{
            s += to_string(nums[left]);
        }
        res.push_back(s);
        return res;
    }
};


参考评论区，代码规范下，这里主要的点有两个：
1. 可以像数组中添加极限值作为哨兵，将数组末尾数值也纳入循环中处理，避免for/while外再一次重复代码处理
2. 习惯于将冗余代码抽出为函数，代码整洁清晰
class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        vector<string> res;
        if(nums.empty())
            return res;
        int left =0;
        nums.push_back(INT_MAX);
        for(int i =1; i<nums.size(); i++){
            if(nums[i]-1 != nums[i-1]){  //为了防止nums[i-1] =2147483647 溢出
                res.push_back(helper(nums[left], nums[i-1]));
                left = i;
            }
        }
        return res;
    }
    
    string helper(int lower, int upper){
        if(lower == upper)
            return to_string(lower);
        return to_string(lower) +"->" + to_string(upper);
    }
};
