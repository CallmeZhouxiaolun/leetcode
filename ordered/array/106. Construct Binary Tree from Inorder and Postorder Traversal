Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
 和105一样的操作，先用map保存inorder
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        for(int i=0; i<inorder.length; i++){
            map.put(inorder[i], i);
        }
        return buildTreeHelper(inorder, 0, inorder.length, postorder, 0, postorder.length);
        
    }
    public TreeNode buildTreeHelper(int[] inorder,int iStart,int iEnd, int[] postorder, int pStart, int pEnd){
        if(pStart == pEnd)
            return null;
        TreeNode root = new TreeNode(postorder[pEnd-1]);
        int rootIndex = map.get(root.val);
        int leftSize = rootIndex - iStart;
        root.left = buildTreeHelper(inorder, iStart, iStart+ leftSize, postorder, pStart, pStart+ leftSize);
        root.right = buildTreeHelper(inorder, iStart+leftSize+1, iEnd, postorder, pStart+leftSize, pEnd-1);
        return root;
    }
}
