Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false

比较简单，记得忽略非字母数字
c++ 版本
class Solution {
public:
    bool isPalindrome(string s) {
        if(s.empty())
            return true;
        int left=0, right=s.size()-1;
        while(left< right){
            while(left<right && !isalnum(s[left]))
                left++;
            while(left<right && !isalnum(s[right]))
                right--;
            if(tolower(s[left]) == tolower(s[right])){
                left++; right--;
            }else
                return false;
        }
        return true;
    }
};






java

class Solution {
    public boolean isPalindrome(String s) {
        if(s.length() ==0)
            return true;
        s= s.toLowerCase();
        int left =0, right = s.length()-1;
        while(left < right){
            while(left<right && !Character.isLetterOrDigit(s.charAt(left))) left++;
            while(left<right && !Character.isLetterOrDigit(s.charAt(right))) right--;
            if(left >=right)
                break;
            char tmp1 = s.charAt(left);
            char tmp2 = s.charAt(right);

            if(tmp1 != tmp2)
                return false;
            left++; right--;
        }
        return true;
        
    }
}




python   效率最高的是two pointer的方法
首先先使用two pointer的方法
```
class Solution:
    def isPalindrome(self, s: str) -> bool:
        if not s:
            return True
        i, j =0, len(s)-1
        while i<j:
            if not s[i].isalnum():
                i+=1
                continue
            if not s[j].isalnum():
                j-=1
                continue
            if s[i].lower() != s[j].lower():
                return False
            i+=1
            j-=1
        return True
        
```

下面的方法看起来简便，空间效率没那么高
```
class Solution:
    def isPalindrome(self, s: str) -> bool:
        new_s = [i.lower() for i in s if i.isalnum()]
        return new_s == new_s[::-1]
```


python 也可以使用regex的方法
```
class Solution:
    def isPalindrome(self, s: str) -> bool:
        regex = re.compile(r'[^0-9a-zA-Z]')
        filtered = regex.sub('', s).lower()
        return filtered== filtered[::-1]
```

