Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

这道题能够想到的是动态规划，f(n)为以n结尾的连续子串的最大值，当f(n-1)<0时候 f(n) =nums[n]; 否则 f(n) = f(n-1)+nums[n];
```
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty())
            return 0;
        vector<int> dp(nums.size());
        dp[0] = nums[0];
        int res =dp[0];
        for(int i=1; i< nums.size(); i++){
            if(dp[i-1] > 0)
                dp[i] = dp[i-1] + nums[i];
            else
                dp[i] = nums[i];
            res = max(res, dp[i]);
        }
        return res;
    }
};
```
solution中发现 其实我们在dp时只需要前一个元素，那这样我们就没必要建立数组，使用一个数记录前一个dp即可
```

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int sum=0, res=INT_MIN;
        for(int i=0;i< nums.size(); i++){
            if(sum<0)
                sum =0;
            sum += nums[i];
            res = max(res, sum);
        }
        return res;
    }
};
```

solution采用了另一种方法 即分治法，将数组分为两部分，则最大子串有三种可能：左子串中、右子串中、从中间元素横跨左右两个子串
```
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        return subFunc(nums, 0, nums.size()-1);
    }
    
    int subFunc(vector<int>& nums, int left, int right){
        if(left > right)
            return INT_MIN;
        int mid = left + (right- left)/2, ml=0, mr=0;
        int lmax = subFunc(nums, left,  mid-1);
        int rmax = subFunc(nums, mid+1, right);
        for(int i=mid-1, sum=0; i>=left; i--){
            sum += nums[i];
            ml = max(sum, ml);
        }
        for(int j= mid+1, sum=0; j<=right; j++){
            sum += nums[j];
            mr = max(sum, mr);
        }
        return max(max(lmax, rmax), ml+mr+nums[mid]);
    }
};
```
