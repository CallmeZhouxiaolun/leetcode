Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.
             
这道题主要是会超时，因此需要采取一些删选方法，可以查用二分法来进行计算，左边为1 右边为x，这里多加了一个判断，就是mid+1的情况下
```
class Solution {
public:
    int mySqrt(int x) {
        if(x ==0)
            return 0;
        int l =1, u =x;
        while(true){
            int mid = l+(u -l)/2;
            if(mid > x/mid) u = mid-1;
            else if(mid+1 > x/(mid+1)) return mid;
            else  l =mid+1;
        }
    }
};
```

大佬还有一种超级简短的方法， 这里注意的是r要设置成long类型，应用如果设置为int类型，r*r将会溢出，为什么设置为r= (r+ x/r)/2;
因此r*r >x，所以(r+ x/r)/2会大于等于x的平方根。
```
class Solution {
public:
    int mySqrt(int x) {
        long r =x;
        while(r*r >x){
            r= (r+ x/r)/2;
        }
        return r;
    }
};
```
