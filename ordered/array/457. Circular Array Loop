You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it's negative (-k), move backward k steps. Since the array is circular, you may assume that the last element's next element is the first element, and the first element's previous element is the last element.

Determine if there is a loop (or a cycle) in nums. A cycle must start and end at the same index and the cycle's length > 1. Furthermore, movements in a cycle must all follow a single direction. In other words, a cycle must not consist of both forward and backward movements.

 

Example 1:

Input: [2,-1,1,2,2]
Output: true
Explanation: There is a cycle, from index 0 -> 2 -> 3 -> 0. The cycle's length is 3.
Example 2:

Input: [-1,2]
Output: false
Explanation: The movement from index 1 -> 1 -> 1 ... is not a cycle, because the cycle's length is 1. By definition the cycle's length must be greater than 1.
Example 3:

Input: [-2,1,-1,-2,-2]
Output: false
Explanation: The movement from index 1 -> 2 -> 1 -> ... is not a cycle, because movement from index 1 -> 2 is a forward movement, but movement from index 2 -> 1 is a backward movement. All movements in a cycle must follow a single direction.
 

Note:

-1000 ≤ nums[i] ≤ 1000
nums[i] ≠ 0
1 ≤ nums.length ≤ 5000
 

Follow up:

Could you solve it in O(n) time complexity and O(1) extra space complexity?

跌跌碰碰的ac了，这里简单说一下自己的想法，
我们分别从每个元素出发，不断的进行移动的过程中需要进行两个操作
1. 由于只能朝向一个方向运行，因此移动过程中判断当前元素方向与start点方向是否一致
2. 使用map记录该移动路程，该链路中若有回路且>1 return true；否则跳出，避免在一个元素位置打转

注意点： (nums[point])%n 避免元素值超出数组长

class Solution {
public:
    bool circularArrayLoop(vector<int>& nums) {
        if(nums.empty())
            return false;
        int n= nums.size();
        for(int i=0; i<n; i++){
            int direction = nums[i] > 0? 1 : -1;
            int count =0, point =i;
            unordered_map<int, int> mp;
            do{
                int next = (point + (nums[point])%n + n) % n;
                if(nums[next] * direction <0){
                    count=0;
                    break;
                }
                point = next;
                if(mp.find(next) != mp.end()){
                    if(count-mp[next] >1){
                        return true;
                    }else{
                        count=0;
                        break;
                    }
                }else{
                    mp[next] = count++;
                }
                    
            }while(point !=i);
            if(count >1)
                return true;
        }
        return false;
    }
};


看了评论区，实际意义上来说该题其实就是查看有没有环，我们可以使用快慢指针，
这里需要注意的是需要加上移动过程中方向的判断
如果遇到不同方向，说明搜寻失败，跳出while循环，我们可以将之前路线上的元素置为0，
因为我们确保当搜寻到该元素时，迟早会失败

class Solution {
public:
    bool circularArrayLoop(vector<int>& nums) {
        if(nums.empty())
            return false;
        for(int i=0; i< nums.size(); i++){
            if(nums[i] ==0)
                continue;
            int slow = i, fast=i;
            while((nums[i] * nums[getNextIndex(nums,slow)]>0) && (nums[i] * nums[getNextIndex(nums,fast)]>0) &&
                 nums[getNextIndex(nums,getNextIndex(nums,fast))] * nums[i] >0){
                slow = getNextIndex(nums,slow);
                fast = getNextIndex(nums,getNextIndex(nums,fast));
                if(slow == fast){
                    if(slow == getNextIndex(nums, slow))
                        break;
                    return true;
                }
            }
            
            int j=i;
            int val = nums[i];
            while(val * nums[j] >0){
                nums[j] =0;
                j = getNextIndex(nums,j);
            }
        }
        return false;
    }
    
    int getNextIndex(vector<int>& nums, int i){
        int n= nums.size();
        return (i+ nums[i]%n +n) %n;
    }
};

