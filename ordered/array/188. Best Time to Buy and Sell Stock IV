Say you have an array for which the i-th element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Example 1:

Input: [2,4,1], k = 2
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.


股票购买第四类，参见第三题的讲解
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices.length ==0)
            return 0;
        int n=  prices.length;
        if(k>= n/2)
            return maxProfit_inf(prices);
        int[][][] dp = new int[n][k+1][2];
        for(int i=0; i<n; i++){
            for(int j=k; j>=1; j--){
                if(i-1==-1){
                    dp[i][j][0] = 0;
                    dp[i][j][1] = -prices[i];
                    continue;
                }
                dp[i][j][0] =Math.max(dp[i-1][j][0], dp[i-1][j][1] +prices[i]);
                dp[i][j][1] =Math.max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i]);
            }
        }
        return dp[n-1][k][0];
    }
    
    public int maxProfit_inf(int[] prices){
        if(prices.length ==0)
            return 0;
        int dp_0 = 0, dp_1 =Integer.MIN_VALUE;
        for(int i=0; i<prices.length; i++){
            int tmp =dp_0;
            dp_0 = Math.max(dp_0, dp_1+prices[i]);
            dp_1 = Math.max(dp_1, tmp-prices[i]);
        }
        return dp_0;
    }
}
