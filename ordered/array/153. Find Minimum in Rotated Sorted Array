Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1
Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0


这道题和33. Search in Rotated Sorted Array其实类似，且较为简单，将mid处元素与l相比较，大于处于左半侧，小于处于有半侧
```
class Solution:
    def findMin(self, nums: List[int]) -> int:
        l,r,res =0, len(nums)-1, sys.maxsize
        while l<=r:
            mid = (l+r)//2
            res = min(res, nums[mid])
            if nums[mid] <= nums[r]:
                r = mid-1
            else:
                l = mid+1
        return res

```

其实不用每次都进行比较
```
class Solution:
    def findMin(self, nums: List[int]) -> int:
        l,r = 0, len(nums)-1
        while l<r:
            mid = (l+r)//2
            if nums[mid] > nums[r]:
                l =mid+1
            else:
                r =mid
        return nums[l]
```
