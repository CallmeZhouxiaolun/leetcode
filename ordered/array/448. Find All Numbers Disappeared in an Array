Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]


第一次遍历时，不断将当前值放入对应的索引处；注意：这里nums[nums[i]-1] != nums[i]是为了防止nums[nums[i]-1] == nums[i]陷入死循环
第二次遍历只需要判断当前值与i+1是否相等
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        for(int i=0; i< nums.size(); i++){
            while(nums[i] != i+1 && nums[nums[i]-1] != nums[i]){
                swap(nums[i], nums[nums[i]-1]);
            }
        }
        for(int i=0; i<nums.size(); i++){
            if(nums[i] != i+1)
                res.push_back(i+1);
        }
        return res;
    }
};


从评论区看到一种解法，第一次遍历将该数值应在位置的值变为负数，则第二次遍历只需要判断哪些索引对应值非负即可
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        for(int i=0; i<nums.size(); i++){
            int index = abs(nums[i])-1;
            nums[index] = nums[index] >0? -nums[index] : nums[index];
        }
        for(int i=0; i<nums.size(); i++){
            if(nums[i] >0)
                res.push_back(i+1);
        }
        return res;
    }
};
