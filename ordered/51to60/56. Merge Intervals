Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

这里首先对数组进行排序，这样对于区间[l1,r1]、[l2,r2]情况我们只需要讨论l1在前的情况，那么对存在的r1 l2 r2 、l2 r1 r2、 l2 r2 r1
三种情况讨论即可
这里需要自定义sort比较，将函数作为参数传入sort函数
```
class Solution {
public:
    static bool cmp(Interval& a, Interval& b){
        return a.start < b.start;
    }
    
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        if(intervals.empty())
            return res;
        sort(intervals.begin(), intervals.end(), cmp);
        res.push_back(intervals[0]);
        for(int i=1; i<intervals.size(); i++){
            if(res.back().end >= intervals[i].start){
                Interval tmp(res.back().start, max(res.back().end, intervals[i].end));
                res.pop_back();
                res.push_back(tmp);
            }
            else
                res.push_back(intervals[i]);
        }
        return res;
    }
};
```

这里可以使用仿函数，仿函数传入时候传入的是对象
```
    struct cmp{
        bool operator()(Interval& a, Interval& b){
            return a.start < b.start;
        }
    };
    
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        if(intervals.empty())
            return res;
        sort(intervals.begin(), intervals.end(), cmp()); //注意
        res.push_back(intervals[0]);
        for(int i=1; i<intervals.size(); i++){
            if(res.back().end >= intervals[i].start){
                Interval tmp(res.back().start, max(res.back().end, intervals[i].end));
                res.pop_back();
                res.push_back(tmp);
            }
            else
                res.push_back(intervals[i]);
        }
        return res;
    }
    ```
    
总结   
对于复合类型，实现排序方式有3种方法：
1） 重载operator<操作符
2） 写全局的比较函数
3） 写仿函数，重载operator()形式为：bool operator()(const 类名& 参数){…}

下面看看这3种方法的实现：
// 排序元素，比较的对象
struct Person
{
  Person(int id, const string& name, int age): id_(id), name_(name), age_(age)
  {}
  
  int id_;
  string name_;
  int age_;
};
// 方式1：重载operator<用于排序时的比较(写在函数体内)
bool operator< (const Person& rt)
{
  return this->id_ < rt.id_;
}
 
// 排序函数写法，默认调用operator<
sort(members.begin(), members.end());
// 方式2：写比较函数
bool CompAge(const Person& pl, const Person& pr)
{
  return pl.age_ < pr.age_;
}
 
// 排序时传入比较函数指针
sort(members.begin(), members.end(), CompAge);
// 方式3：仿函数
struct CompName
{
  bool operator()(const Person& pl, const Person& pr)
  {
    return pl.name_ < pr.name_;
  }
};
 
// 排序时传入函数对象
sort(members.begin(), members.end(), CompName());



python :
```
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x:x[0])
        res=[]
        for i in intervals:
            if not res:
                res.append(i)
                continue
            if i[0] > res[-1][1]:
                res.append(i)
            elif i[1]> res[-1][1]:
                res[-1][1] = i[1]
        return res
                
```


class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key = lambda x: x[0])
        res =[]
        for i in intervals:
            if res and i[0] <= res[-1][1]:
                res[-1][1] = max(res[-1][1], i[1])
            else:
                res.append(i)
        return res


一遍又一遍哈哈哈哈
class Solution {
    public:

    struct Compare{
        bool operator()(const vector<int>& p, const vector<int>& q){
            return p[0] < q[0];
        }
    };
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> res;
        sort(intervals.begin(), intervals.end(), Compare());
        res.push_back(intervals[0]);
        for(int i=1; i<intervals.size(); i++){
            if(res.back()[1] >= intervals[i][0]){
                intervals[i][0] = res.back()[0];
                intervals[i][1] = max(intervals[i][1], res.back()[1]);
                res.pop_back();
            }
            res.push_back(intervals[i]);
        }
        return res;
    }
};
