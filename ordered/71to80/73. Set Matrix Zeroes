Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.

Example 1:

Input: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
Output: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]
Example 2:

Input: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
Output: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]
Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

最开始的做法是记录下0元素的坐标，然后根据坐标将对应行，列置0;这种做法空间复杂度为O(m*n)
```
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        map<int, int> row, col;
        for(int i=0; i<matrix.size(); i++){
            for(int j=0; j< matrix[i].size(); j++){
                if(matrix[i][j] == 0){
                    row[i]=1; col[j]=1;
                }
            }
        }
        for(int i=0; i<matrix.size(); i++){
            for(int j=0; j<matrix[i].size(); j++){
                if(row.find(i) != row.end()  || col.find(j)!= col.end())
                    matrix[i][j]=0;
            }
        }
    }
};
```

看了solution之后说，能不能采用O(1)的空间复杂度来做， 首先采用的方法是遍历矩阵，遇到0元素，将该元素对应行列值设置为一个不可达值，
然后再次遍历矩阵，遇到不可达值置0
```
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int MODEFINE =-10000;
        for(int i=0; i<matrix.size(); i++){
            for(int j=0; j<matrix[0].size(); j++){
                if(matrix[i][j] == 0){
                    for(int k =0;k<matrix[0].size(); k++){
                        if(matrix[i][k] != 0)
                            matrix[i][k] = MODEFINE;
                    }
                    for(int k =0;k<matrix.size(); k++){
                        if(matrix[k][j] != 0)
                            matrix[k][j] = MODEFINE;
                    }
                }
            }
        }
        for(int i=0; i<matrix.size(); i++){
            for(int j=0; j<matrix[0].size(); j++){
                if(matrix[i][j] == MODEFINE)
                    matrix[i][j] =0;
            }
        }
    }
};
```

上述做法有一个问题，例如同一行有两个0元素，在进行设置不可达值或者设置0值时都会对该行进行两次操作。
为了避免这个问题，作者新采用了一种方法，用每行的第一个元素标记该行是否有0，用每列的第一个元素标记该列是否有0；
针对matrix[0][0]重复包含了第0行和第0列，因此我们采用matrix[0][0]标记第一行，而多设置一个isCol来记录第一列的标记
在进行标记时我们从第0行出发，这里第0行是为了设置matrix[0][0],而从第1列出发即可，第0列不必遍历，因为[0][0]由isCol标记，
针对其他的[i][0]，如果该行后面的值不影响该元素，那么只受本元素影响；如果后面的值影响该元素，本元素不必管。
```
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        bool isCol =false;
        for(int i=0; i<matrix.size(); i++){
            if(matrix[i][0] == 0)
                isCol =true;
            for(int j=1; j<matrix[i].size(); j++){
                if(matrix[i][j] == 0){
                    matrix[i][0] =0;
                    matrix[0][j] =0;
                }
            }
        }
        for(int i=1; i<matrix.size(); i++){
            for(int j=1; j<matrix[0].size(); j++){
                if(matrix[i][0]==0 || matrix[0][j] == 0)
                    matrix[i][j] =0;
            }
        }
        if(matrix[0][0] == 0){
            for(int i=0; i<matrix[0].size(); i++)
                matrix[0][i] =0;
        }
        if(isCol){
            for(int i=0; i<matrix.size(); i++)
                matrix[i][0] =0;
        }
    }
};
```
