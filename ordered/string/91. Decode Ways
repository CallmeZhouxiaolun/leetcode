A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

经过测试自己加一个实例：
"100000000000000000000000001"
Output：0
"1001"
Output：0
"601"
Output：0
因为0不能表示字母，因此一个0只有和前面的0结合，两个0就没办法表示了

在未考虑0之前自己的想法是比较简单的，只需要创建一个n+1的dp数组，从前往后遍历，dp[i] =dp[i+1] +dp[i+2]
dp[0]是为了解决dp[2] =dp[1]+dp[0]，这里的i对应到string中为i-1;
但是后来提交时候发生错误，因为没有考虑0；
仔细研究可以知道，如果需要考虑0 发现从后往前遍历更方便，这样遇到0就可以continue，默认为0，直到非0数字，这时会考虑其与后一位的结合，
也就是会考虑到和0的结合，而多个0连续出现时，dp[i] =dp[i+1]+dp[i+2] 还会是0
```
class Solution {
    public int numDecodings(String s) {
        if(s ==null || s.length() ==0)
            return 0;
        int n= s.length();
        int[] dp =  new int[n+1];
        dp[n] =1;
        if(s.charAt(n-1) !='0')
            dp[n-1]=1;
        for(int i=n-2; i>=0; i--){
            if(s.charAt(i) =='0'){
                continue;
            }
            int tmp =(s.charAt(i)-'0')*10 + (s.charAt(i+1)-'0');
            if(tmp >26)
                dp[i] = dp[i+1];
            else
                dp[i] = dp[i+1] + dp[i+2];
        }
        return dp[0];
    }
}
```


python 
最容易理解：
class Solution:
    def numDecodings(self, s: str) -> int:
        if not s:
            return 0
        dp =[0] * (len(s)+1)
        dp[0] =1
        dp[1] = 0 if s[0] =='0' else 1
        for i in range(2, len(s)+1):
            # one step
            if 0< int(s[i-1]) <=9:
                dp[i] += dp[i-1]
            
            # two step
            if 10<= int(s[i-2:i]) <=26:
                dp[i] +=dp[i-2]
        
        return dp[-1]
        
  还可以从后往前
