Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,1,2,3,3],

Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}


这道题比较容易想到双指针的做法，一个指针用于遍历，另一个指针用于指向可以填入的位置。
在以下的代码中，Count记录相同数量，以count将大于2的重复去掉，tmp指向当前判断的重复项，将nums[i]与其比较看是否重复，然后判断Count
```
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int first=1, second=1, count=1;
        int tmp = nums[0];
        while(first < nums.size()){
            if(nums[first] == tmp){
                count++;
                if(count <= 2){
                    swap(nums[first], nums[second]);
                    first++; second++;
                }
                else
                    first++;
            }
            else{
                tmp = nums[first];
                swap(nums[first], nums[second]);
                first++; second++; count=1;
            }
        }
        return second;
    }
};
```

参看了solution之后发现自己的做法比较麻烦，其实不需要count和tmp,我们只需要将当前元素与可插入指针pos-2处的元素对比即可，如果相同即对于2的重复，
不想听即可以插入
```
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int pos=2, n= nums.size();
        if(n<=2)
            return n;
        for(int i=2; i<n; i++){
            if(nums[i] != nums[pos-2])
                nums[pos++] = nums[i];
        }
        return pos;
    }
};
```
