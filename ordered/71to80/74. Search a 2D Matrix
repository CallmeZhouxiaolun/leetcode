Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

比较简单，这里采用折半搜索，对注释掉的代码进行了优化，为什么要设置matrix[0].empty()的判断，
是为了防止vector<vector<int>> matrix={{}}, 这时没有元素，但是matrix.size()=1
```
class Solution {
public:
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int i=0;
//         for(; i<matrix.size(); i++){
//             if(binarySearch(matrix[i], target))
//                 return true;
//         }
//         return false;
        
//     }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty() || matrix[0].empty())
            return false;
        int i=0;
        for(; i<matrix.size(); i++){
            if(target <= matrix[i].back())
                return binarySearch(matrix[i], target);
        }
        return false;
    }
    bool binarySearch(vector<int>& A, int target){
        int left =0, right =A.size()-1;
        while(left<= right){
            int mid = left + (right-left)/2;
            if(A[mid] == target)
                return true;
            else if(A[mid] < target)
                left = mid+1;
            else
                right = mid-1;
        }
        return false;
    }
};
```

二分法
```
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty())
            return false;
        int m=matrix.size(), n=matrix[0].size();
        int left=0, right =m*n-1;
        while(left<=right){
            int med = left+(right-left)/2;
            int i= med/n, j =med%n;
            if(matrix[i][j] > target)
                right =med-1;
            else if(matrix[i][j] < target)
                left = med+1;
            else
                return true;
        }
        return false;
    }
};
```
