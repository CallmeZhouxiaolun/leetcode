Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

这里首先对数组进行排序，这样对于区间[l1,r1]、[l2,r2]情况我们只需要讨论l1在前的情况，那么对存在的r1 l2 r2 、l2 r1 r2、 l2 r2 r1
三种情况讨论即可
这里需要自定义sort比较，将函数作为参数传入sort函数
```
class Solution {
public:
    static bool cmp(Interval& a, Interval& b){
        return a.start < b.start;
    }
    
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        if(intervals.empty())
            return res;
        sort(intervals.begin(), intervals.end(), cmp);
        res.push_back(intervals[0]);
        for(int i=1; i<intervals.size(); i++){
            if(res.back().end >= intervals[i].start){
                Interval tmp(res.back().start, max(res.back().end, intervals[i].end));
                res.pop_back();
                res.push_back(tmp);
            }
            else
                res.push_back(intervals[i]);
        }
        return res;
    }
};
```
