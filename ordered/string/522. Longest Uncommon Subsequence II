Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.

A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.

The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.

Example 1:
Input: "aba", "cdc", "eae"
Output: 3
Note:

All the given strings' lengths will not exceed 10.
The length of the given list will be in the range of [2, 50].


这个题目看完一直没搞清楚怎么做，只能看solution了，见🔗：https://leetcode.com/problems/longest-uncommon-subsequence-ii/discuss/99443/Java(15ms)-Sort-%2B-check-subsequence
这里主要说一下自己的理解：

1. 首先将string数组从大到小排序，如果没有重复项，那最长的string就是所要求取的最大非公共子串。
2. 在包含重复项的情况下，从大到小遍历，如果该string不存在重复项，就判断其是否是比其长的string的字串，如果不是返回其长度
3. 在判断是否是子串时候，由于子串为string去掉某些字符的结果，所以并不是连续的，但相对位置是固定的，我们可以对较短string逐字符确认


```
class Solution {
    public int findLUSlength(String[] strs) {
        if(strs.length ==0) {
            return 0;
        }
        Arrays.sort(strs, (o1,o2)-> o2.length() -o1.length());
        Set<String> duplicates = getDuplicates(strs);
        for(int i=0; i<strs.length; i++){
            if(!duplicates.contains(strs[i])){
                if(i==0){return strs[0].length();}
                for(int j=0; j<i; j++){
                    if(isSubsequence(strs[j], strs[i])){ break;}
                    if(j==i-1){ return strs[i].length();}
                }
            }
        }
        return -1;
    }

    public boolean isSubsequence(String s1, String s2){
        int i=0, j=0;
        while(i< s1.length() && j< s2.length()){
            if(s1.charAt(i) == s2.charAt(j)) {j++;}
            i++;
        }
        return j==s2.length();
    }

    public Set<String> getDuplicates(String[] strs){
        Set<String> set = new HashSet<>();
        Set<String> duplicates = new HashSet<>();
        for(String str: strs){
            if(set.contains(str)) {
                duplicates.add(str);
            }
            set.add(str);
        }
        return duplicates;
    }
}
```
