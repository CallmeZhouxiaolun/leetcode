A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
Note: m and n will be at most 100.

Example 1:

Input:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2
Explanation:
There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

这个题和上一道题很相似，我们同样采用动态规划，但是我们吧dp元素初始化为0，因为有障碍物不一定能到达首先更新第一列和第一行是不在是简单的设置为1，
我们要根据obstacleGrid对应位置值及dp的前一个值还进行更新，同样，在更新dp值时候要需要注意obstacleGrid值
```
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<long int>> dp(m, vector<long int>(n, 0));
        if(obstacleGrid[0][0] == 1)
            return 0;
        dp[0][0] =1;
        for(int i=1; i<n; i++){
            if(obstacleGrid[0][i] == 0 && dp[0][i-1]==1)
                dp[0][i] =1;
        }
        for(int i=1; i<m; i++){
            if(obstacleGrid[i][0] == 0 && dp[i-1][0] ==1)
                dp[i][0] =1;
        }
        
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                if(obstacleGrid[i][j] == 0)
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};
```


python O(n)的辅助空间
```
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if not obstacleGrid:
            return 0
        m,n = len(obstacleGrid), len(obstacleGrid[0])
        dp = [0]*n
        for i in range(n):
            if obstacleGrid[0][i] ==1:
                break
            dp[i] =1
        for i in range(1,m):
            for j in range(n):
                if obstacleGrid[i][j] ==1:
                    dp[j] = 0
                else:
                    dp[j] = dp[j] + (dp[j-1] if j!=0 else 0)
        return dp[n-1]
```


