Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths L and M.  (For clarification, the L-length subarray could occur before or after the M-length subarray.)

Formally, return the largest V for which V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and either:

0 <= i < i + L - 1 < j < j + M - 1 < A.length, or
0 <= j < j + M - 1 < i < i + L - 1 < A.length.
 

Example 1:

Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
Example 2:

Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
Example 3:

Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.

最开始的时候采用了最笨的方法，找到一个分割点，在分割点两侧分别找L和M，这种遍历了所有的情况，最后的用时为668ms
```
class Solution {
public:
    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
        if(L +M >A.size())
            return 0;
        int max_sum=0;
        for(int i=L; i<=A.size()-M; i++){
            int l_max = maxSubarray(A, 0, i-1, L);
            int m_max = maxSubarray(A, i,A.size()-1, M);
            if(l_max + m_max > max_sum)
                max_sum =l_max+m_max;
        }
        for(int i=M; i<=A.size()-L; i++){
            int m_max = maxSubarray(A, 0, i-1, M);
            int l_max = maxSubarray(A, i,A.size()-1, L);
            if(l_max + m_max > max_sum)
                max_sum =l_max+m_max;
        }
        return max_sum;
    }
    int maxSubarray(vector<int>& A,int start, int end, int len){
        int max_sum =0;
        for(int i=start; i<=end- len+1; i++){
			      int sum=0;
            for(int j=i; j<= i+len-1; j++)
                sum += A[j];
            if(sum > max_sum)
                max_sum =sum;
        }
        return max_sum;
    }
};
```


。。。。看到了solution 。。。。自闭了。。。。写完大佬的代码，用时4ms。。。还贼段。。。。。不想说话。。。。。

我们这个题目其实就是列举所有的L和M 然后选出和最大的。下面的做法首先进行累加，则A[i-1]为前i个元素的和。
这里lmax表示最后M个元素之前的L个元素的最大值， mmax表示最后L个元素之前的M的元素的最大值
lmax = max(lmax, A[i-M] -A[i-M-L]); 这一句是假设L在前，M在后，通过A[i]-A[i-M],列举了所有的M个元素情况，
                                    通过max函数，探寻了每个M之前最大的L个元素。即找到了每个Ｍ及其对应的最大Ｌ元素，
                                    而后通过最后的max找到最大的Ｌ＋Ｍ；
mmax讨论的是Ｍ在前的情况
```
class Solution {
public:
    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
        for(int i=1; i<A.size(); i++)
            A[i] += A[i-1];
        int res =A[L+M-1], lmax =A[L-1], mmax =A[M-1];
        for(int i=L+M; i<A.size(); i++){
            lmax = max(lmax, A[i-M] -A[i-M-L]);
            mmax = max(mmax, A[i-L] -A[i-L-M]);
            res = max(res, max(lmax + A[i]-A[i-M], mmax+ A[i]-A[i-L]));
        }
        return res;
    }
};
```
