We are given a matrix with R rows and C columns has cells with integer coordinates (r, c), where 0 <= r < R and 0 <= c < C.

Additionally, we are given a cell in that matrix with coordinates (r0, c0).

Return the coordinates of all cells in the matrix, sorted by their distance from (r0, c0) from smallest distance to largest distance.  Here, the distance between two cells (r1, c1) and (r2, c2) is the Manhattan distance, |r1 - r2| + |c1 - c2|.  (You may return the answer in any order that satisfies this condition.)

 

Example 1:

Input: R = 1, C = 2, r0 = 0, c0 = 0
Output: [[0,0],[0,1]]
Explanation: The distances from (r0, c0) to other cells are: [0,1]
Example 2:

Input: R = 2, C = 2, r0 = 0, c0 = 1
Output: [[0,1],[0,0],[1,1],[1,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2]
The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.
Example 3:

Input: R = 2, C = 3, r0 = 1, c0 = 2
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2,2,3]
There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].
 

Note:

1 <= R <= 100
1 <= C <= 100
0 <= r0 < R
0 <= c0 < C


这就是将矩阵中坐标 按照给定坐标距离大小放入res数组中，我们首先采用的是unordered_map方法 key：距离，value：坐标
```
class Solution {
public:
     vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {
        vector<vector<int>> res;
        unordered_map<int, vector<vector<int>>> mp;
        for(int i=0; i<R; i++){
            for(int j=0; j<C; j++){
                mp[abs(j-c0) + abs(i- r0)].push_back({i,j});
            }
        }
        int dis=0;
        while(mp.find(dis) != mp.end()){
            for(int i=0; i<mp[dis].size(); i++)
                res.push_back(mp[dis][i]);
            dis++;
        }
        return res;
    }
};
```
后来发现其实不需要使用unordered_map ,用map可能会更好一点，因为map会按照key进行一个排序；这里采用的是multimap，因为同一距离会有很多个坐标
```
class Solution {
public:
     vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {
         vector<vector<int>> res;
         multimap<int, vector<int>> mp;
         vector<int> tmp;
         for(int i=0; i<R; i++){
            for(int j=0; j<C; j++){
                tmp.push_back(i);
                tmp.push_back(j);
                mp.insert(make_pair(abs(j-c0) + abs(i- r0), tmp));
                tmp.clear();
            }
        }
         auto iter = mp.begin();
         for(; iter != mp.end(); iter++){
             res.push_back(iter->second);
         }
         return res;
     }
};
```
