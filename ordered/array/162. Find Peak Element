A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.
Follow up: Your solution should be in logarithmic complexity.


采用二叉搜索，mid元素若如果比下一个大，则右边存在peak, 令left =mid+1;；
否则当前元素及左边元素存在peak，令right= mid; 
这里注意：为了防止mid+1不超出边界， while的判断条件为left<right,这样mid不会为最后一个
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int left =0, right =nums.size()-1;
        while(left < right){
            int mid = left +(right-left)/2;
            if(nums[mid] < nums[mid+1]){
                left =mid+1;
            }else{
                right= mid;
            }
        }
        return left;
    }
};

