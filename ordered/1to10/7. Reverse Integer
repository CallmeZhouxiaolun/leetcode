题目描述：
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: 
[−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 
when the reversed integer overflows.


本题目比较简单，主要考虑的就是溢出的处理。开始代码为
class Solution {
public:
    int reverse(int x) {
        long num=0;
        int flag =false;
        if(x == INT_MIN)
            return 0;
        else if(x<0){
            flag = true;
            x=-x;
        }
        while(x>0){
            num = num*10 + (x%10);
            x/=10;
        }
        if(flag){
            num = -num;
        }
        if(num>INT_MAX || num<INT_MIN)
            return 0;
        return num;
    }
};

看完答案之后发现，其实负数不需要单独处理，因为负数对10取余数得到的还是负数：
考虑：
To explain, lets assume that revrev is positive.

If temp=rev⋅10+poptemp=rev⋅10+pop causes overflow, then it must be that rev≥INTMAX/10
If rev>INTMAX/10, then temp=rev⋅10+pop is guaranteed to overflow.
If rev==INTMAX10, then temp=rev⋅10+pop will overflow if and only if pop>7
Similar logic can be applied when revrev is negative.
重新编写代码如下所示：
class Solution {
public:
    int reverse(int x) {
        int result =0 ;
        while(x!=0){
            int pop = x%10;
            x/=10;
            if(result > INT_MAX/10 || (result == INT_MAX/10 && pop> 7))
                return 0;
            if(result < INT_MIN/10 || (result == INT_MIN/10 && pop< -8))
                return 0;
            result = result*10 + pop;
        }
        return result;
    }
};
