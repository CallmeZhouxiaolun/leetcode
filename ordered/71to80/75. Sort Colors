
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
Could you come up with a one-pass algorithm using only constant space?

这道题可以看做two pointer问题，一个pointer遍历，一个记录特定元素放置位置，
我们可以将题目分为两步，第一步放置0， 第二步放置1
```
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int k=0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] ==0){
                if(i!=k)
                    swap(nums[i], nums[k]);
                k++;
            }
        }
        for(int i=k; i<nums.size(); i++){
            if(nums[i] ==1){
                if(i!=k)
                    swap(nums[i], nums[k]);
                k++;
            }
        }
    }
};
```

后来想到可以用三个pointer，一个pointer遍历，一个pointer放置0，一个pointer放置2；
这里循环条件之所以为i<=l是因为l之后的全部为2，已经满足要求不需要再往后遍历了。
```
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int i=0, k=0, l=nums.size()-1;
        while(i<=l){
            if(nums[i]==0) swap(nums[i++], nums[k++]);
            else if(nums[i] == 2) swap(nums[i], nums[l--]);
            else i++;
        }
    }
};
```
