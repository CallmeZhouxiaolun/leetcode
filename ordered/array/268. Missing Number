Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

 

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
Example 4:

Input: nums = [0]
Output: 1
Explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.
 

Constraints:

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.


自己的想法比较简单，我们设置数组，由0-n,遍历nums,对存在的索引置为1
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n= nums.size();
        vector<bool> res(n+1, false);
        for(int num:nums){
            res[num] = true;
        }
        for(int i=0; i<=n; i++){
            if(!res[i])
                return i;
        }
        return -1;
    }
};


从另一个角度来看，其实0-n之间只有一个空缺，可以联想到异或0-n及nums中的数字
异或的特性：
  1. 0 异或任意数值等于数值本身 x^0=x
  2. x^x=0
  3. 交换率
  由此我们可以发现若我们异或0-n及nums中的所有数值，则空缺值之外的数值都发生了自身的异或=0，最后只留下空缺值（只异或了一次）
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int res=0;
        for(int i=0; i<nums.size(); i++){
            res = res^(i+1)^nums[i];
        }
        return res;
    }
};
