Given an array A of integers, return the length of the longest arithmetic subsequence in A.

Recall that a subsequence of A is a list A[i_1], A[i_2], ..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a sequence B is arithmetic if B[i+1] - B[i] are all the same value (for 0 <= i < B.length - 1).

 

Example 1:

Input: [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.
Example 2:

Input: [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].


采用dp,dp真的掌握的不是很熟练，根本想不出来，参见大佬的代码：
这里设置了一个由unordered_map组成的数组，这里vmp[j][diff]代表的是以j为结尾，diff差的子序列的数量。
之所以返回res+1, 初始化全为0，vmp[j][diff] = vmp[i][diff]+1;只计算了后面的那个 前面的那个元素未计算，少算了一个
```
class Solution {
public:
    int longestArithSeqLength(vector<int>& A) {
        vector<unordered_map<int, int>> vmp(A.size());
        int res =0;
        for(int i=0; i<A.size(); i++){
            for(int j=i+1; j<A.size(); j++){
                int diff = A[i] - A[j];
                vmp[j][diff] = vmp[i][diff]+1;
                res = max(res, vmp[j][diff]);
            }
        }
        return res+1;
    }
};
```
