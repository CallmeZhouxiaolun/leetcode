题目描述：
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

开始的想法是设置tmp字符串，每次从原字符串中提取一个字符判断其是否在tmp中，若不在就+1，并将该字符加入到tmp中，
否则就可以确定不能讲该字符加入到前面的字符中（会造成重复）。
这里不能从错误处直接开始，例如dvdf，如果从错误的d除直接开始，就会认为最大为2，而错过最长子串vdf
Input:
"dvdf"
Output:
2
Expected:
3
本方法即为暴力方法，即我们考虑了所有的子串，效率较低
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int max=0;
        for(int i=0; i<s.length(); i++){
            string str=s.substr(i);
            int n=0, l=0;
            string tmp="";
            while(l<str.length()){
                if(tmp.find(str[l]) != string::npos){
                    if(n>max)
                        max=n;
                    break;
                }else{
                    tmp+=str[l++];
                    n++;
                }
            }
            if(n>max)
                max=n;
        }
        
        return max;
    }
};

2.在查看solution之后，可以发现在数组及字符串子串问题上，我们可以使用滑动窗口
们使用 HashSet 将字符存储在当前窗口 [i,j)[i,j)（最初 j=i）中。 
然后我们向右侧滑动索引j，如果它不在 HashSet 中，我们会继续滑动j。
直到 s[j] 已经存在于 HashSet 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 ii 开头。
如果我们对所有的 ii 这样做，就可以得到答案。
这里，由于查找一个字符串是否在子串中，需要检查整个字符串，时间复杂度为O(n^2),因此采用哈希的方式。
这样可以用O(1)的时间来完成对字符是否在当前的子字符串中的检查。

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int max_len=0;
        map<char, int> mp;
        for(int left=0, right=0; right< s.length(); right++){
            if(mp.find(s[right])!= mp.end()){
                //这里之所以进行max是因为查找到的字符可能会在滑动窗口外部，也即是滑动窗口前部，这种情况下不需要移动left。
                left = max(left, mp[s[right]]+1);
            }
            mp[s[right]]= right;
            max_len = max(max_len, right-left+1);
        }
        return max_len;
    }
};


*********************************我是一个分隔符***************************************
好久不做题，全部忘掉了。。自己写了一个，比较乱， 先贴代码
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.isEmpty() || s==null)
            return 0;
        Map<Character,Integer> mp = new HashMap<>();
        int left=0, right=0, res=0;
        while(right < s.length()){
            if(mp.containsKey(s.charAt(right))){
                int tmp = mp.get(s.charAt(right));
                if(tmp>= left){
                    res = Math.max(res, right-left);
                    left = Math.max(left, tmp+1);
                }
            }
            mp.put(s.charAt(right), right);
            right++;
        }
        return Math.max(res, right-left);
    }
}

然后看别人写的，重新更新了一边，思想一样
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.isEmpty() || s==null)
            return 0;
        Map<Character, Integer> mp = new HashMap<>();
        int res=0;
        for(int i=0, j=0; j< s.length(); j++){
            if(mp.containsKey(s.charAt(j))){
                i = Math.max(i, mp.get(s.charAt(j))+1);
            }
            res = Math.max(res, j-i+1);
            mp.put(s.charAt(j), j);
        }
        return res;
    }
}




python代码
第一次写的比较乱，用到了滑动窗口的思想，但是没有更好的舍去不必要检查
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if not s:
            return 0
        i,j=0,1
        res =1
        while j<len(s):
            tmp =set(s[i:j+1])
            if len(tmp) < j-i+1:
                res = max(res, len(tmp))
                i +=1
                j =i+1
            else:
                j+=1
        return max(res, j-i)


看了solution  首先使用滑动窗口的思想，外加set功能
注意遇到重复字符时，可以直接从前一个重复字符的下一个字符开始，不需要从i+1在进行剪切
下面的代码虽然也是从i+1开始的，但如果i+1不满足判断条件，还会继续删除，直到删除掉重复元素

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if not s:
            return 0
        i,j,res=0,0,0
        hashset = set()
        while j < len(s):
            if s[j] not in hashset:
                hashset.add(s[j])
                j +=1
                res =max(res, j-i)
            else:
                hashset.remove(s[i])
                i+=1
        return res
        
  
  我们发现在遇到重复元素时，我们依旧从i+1开始，但其实可以直接从重复元素的第一个位置的下一个位置开始
  例如  a b c d c  当i=0,j=4时候，遇到重复元素，我们不需要从1开始，可以直接从3开始，
  因此，如果我们直到重复元素的索引时，可以大大简便
  class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        d={}
        start ,res=0, 0
        for j in range(len(s)):
            if s[j] in d and d[s[j]] >=start:
                start = d[s[j]] +1
                d[s[j]] = j
            else:
                d[s[j]] = j
                res = max(res, j-start+1)
        return res  
        
 注意，这里将存储的索引与start比较是为了判断是否在窗口内，也有可能在窗口之前，不予理会
 同时需要更新start 剔除元素，这里最少也要剔除一个，就算新加入一个  也不会超过之前的res
 因此，我们只在插入的时候才进行更新res
