Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?

这个题复杂点是带有重复元素，最复杂的情况是left:left+k与right-l:right等处元素相同（1）。
我们同样采用折半搜索的方法，将中间值与target比较，相等return True 否则，进行进一步判断。
一、在进行判断是，首先处理（1）情况，因为如果nums[mid] == nums[left]==nums[right]时，我们不能判断元素在哪边。
我们一直需要处理到left与right处元素不相同
二、而后我们将nums[mid] 与 nums[right]比较大小，判断target在那边，这里注意等于号，因为可能存在mid-right处元素处处相等的情况
```
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int left=0, right = nums.size()-1;
        while(left <= right){
            int mid = left + (right - left)/2;
            if(nums[mid] == target)
                return true;
            if(nums[mid] == nums[left] && nums[mid] ==nums[right])
                left++, right--;
            else if(nums[mid] <= nums[right]){
                if(nums[mid] <target && target <=nums[right])
                    left = mid+1;
                else
                    right = mid-1;
            }
            else{
                if(nums[left] <= target && target < nums[mid])
                    right = mid-1;
                else
                    left = mid+1;
            }
        }
        return false;
    }
};
```
