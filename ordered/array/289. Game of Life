According to Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population.
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.

 

Example 1:


Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
Example 2:


Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 25
board[i][j] is 0 or 1.
 

Follow up:

Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?

首先想到的是创建额外的数据标记原始数组的值是否为1

class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int m=board.size(), n=board[0].size();
        vector<vector<bool>> flag(m, vector<bool>(n, false));
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(board[i][j])
                    flag[i][j]= true;
            }
        }
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                board[i][j] = helper(board,flag, i, j);
            }
        }
    }
    int helper(vector<vector<int>>& board , vector<vector<bool>>& flag, int i, int j){
        int live_count =0;
        int m=board.size(), n=board[0].size();
        for(int k=max(0, i-1); k<= min(i+1, m-1); k++){
            for(int l= max(0, j-1); l<=min(j+1, n-1); l++){
                if(k==i && l==j)
                    continue;
                if(flag[k][l])
                    live_count++;
            }
        }
        if(board[i][j] && (live_count<2 || live_count>3)){
            return 0;
        }
        if(!board[i][j] && live_count==3){
            return 1;
        }
        return board[i][j];
    }
    
};

后来想到其实原数组只有0、1，在遍历过程中只可能存在三种情况
1. 数值不变
2. 0 -> 1
3. 1 -> 0
其中第一种情况不影响后续判断，后两种情况我们不能直接修改元素为1/0，会影响后续判断，
但是我们可以针对 0-> 1 修改元素为2，1 ->0 修改元素为3, 这样我们统计周围1的个数时就可以区分原始1和修改的区别
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Game of Life.
Memory Usage: 7.3 MB, less than 85.29% of C++ online submissions for Game of Life.

class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int m=board.size(), n=board[0].size();
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                helper(board, i, j);
            }
        }
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(board[i][j] ==2)
                    board[i][j] = 0;
                else if(board[i][j] ==3)
                    board[i][j] =1;
            }
        }
    }
    void helper(vector<vector<int>>& board, int i, int j){
        int live_count =0;
        int m=board.size(), n=board[0].size();
        for(int k=max(0, i-1); k<= min(i+1, m-1); k++){
            for(int l= max(0, j-1); l<=min(j+1, n-1); l++){
                if(k==i && l==j)
                    continue;
                if(board[k][l]==1 || board[k][l]==2)
                    live_count++;
            }
        }
        if(board[i][j] && (live_count<2 || live_count>3)){
            board[i][j]=2;
        }
        if(!board[i][j] && live_count==3){
            board[i][j]=3;
        }
    }
    
};
