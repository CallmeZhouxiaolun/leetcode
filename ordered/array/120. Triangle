Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

看到题目想到用动态规划的方法来做，首先需要找到递归方程式，这里采用从最后一行往第一行递归的方法，dp数组存的是每个位置往下的最小和
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle.size() ==0)
            return 0;
        int[] dp = new int[triangle.size()+1];
        for(int i=triangle.size()-1; i>=0 ; i--){
            for(int j=0; j<triangle.get(i).size(); j++){
                int tmp1 =triangle.get(i).get(j)+ dp[j];
                int tmp2 =triangle.get(i).get(j)+ dp[j+1];
                dp[j] = Math.min(tmp1, tmp2);
            }
        }
        return dp[0];
    }
}

一样的思想

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if (triangle.size() == 0) return 0;
        else if (triangle.size() == 1) return triangle.get(0).get(0);

        int[] dp = new int[triangle.size()];

        for(int i=0; i<dp.length; i++) dp[i] = triangle.get(triangle.size()-1).get(i);

        for (int i = triangle.size() - 2; i >= 0; --i) {
            for (int j = 0; j < triangle.get(i).size(); ++j) {
                dp[j] = Math.min(dp[j], dp[j + 1]) + triangle.get(i).get(j);
            }
        }
        return dp[0];
    }
}


python 采用递归的方法
```
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        for i in range(len(triangle)-2, -1, -1):
            for j in range(len(triangle[i])):
                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])
            
        return triangle[0][0]
                
```
下面代码效率更高
```
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        if not triangle:
            return
        dp = [0] *(len(triangle)+1)
        for row in triangle[::-1]:
            for j in range(len(row)):
                dp[j] = min(dp[j], dp[j+1]) + row[j]
        return dp[0]
```
