Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]


开始是创建了一个nums1的copy数组
```
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int[] nums = new int[m];
        System.arraycopy(nums1, 0, nums, 0, m);
        int i=0, j=0, k=0;
        while(i<m && j<n){
            if(nums[i] < nums2[j])
                nums1[k++] = nums[i++];
            else
                nums1[k++] = nums2[j++];
        }
        while(i<m){
            nums1[k++] = nums[i++];
        }
        while(j<n)
            nums1[k++] = nums2[j++];
        
    }
}
```

后来在solution发现了O(1)空间复杂度的做法
```
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i=m-1, j=n-1, k=m+n-1;
        while(i>=0 && j>=0){
            if(nums1[i] < nums2[j])
                nums1[k--] = nums2[j--];
            else
                nums1[k--] = nums1[i--];
        }
        while(j>=0)
            nums1[k--] =nums2[j--];
    }
}
```


python有切片功能 因此可以简化：
```
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        while m>0 and n>0:
            if nums1[m-1] > nums2[n-1]:
                nums1[m+n-1] = nums1[m-1]
                m -=1
            else:
                nums1[m+n-1] = nums2[n-1]
                n-=1
        nums1[:n] = nums2[:n]
 ```
