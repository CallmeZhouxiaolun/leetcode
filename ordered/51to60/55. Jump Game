Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:

Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.

这里和之前Jump Game II 一样，唯一的不同就是这里可能不能到达终点，因为存在0，因此，不同于上一题，我们设置maxend=end（因为当前元素值为0，
下一次范围还是本身，） start=end（如maxend理由相同），这里添加了一个if语句，既是当我们走了一次之后发现start== end说明我们依旧停留在原地，
也就是说该处元素值为0；
```
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n= nums.size(), start=0, end=0, step=0;
        while(end < n-1){
            step++;
            int maxend= end;
            for(int i=start; i<=end; i++){
                if(i+nums[i] >= n-1) return true;
                maxend = max(maxend, i+nums[i]);
            }
            start =end;
            end = maxend;
            if(start == end) return false;
        }
        return true;
    }
};
```
看了solution之后发现dp算法，设置数组记录状态，每个元素状态为GOOD、BAD、UNKNOW,最除都是UNKNOW,最后一个元素为GOOD
```

class Solution {
public:
    enum Index{GOOD, BAD, UNKNOW};
    vector<Index> memo;
    bool canJump(vector<int>& nums) {
        for(int i=0; i<nums.size(); i++)
            memo.push_back(UNKNOW);
        memo[memo.size()-1] = GOOD;
        
        for(int i= nums.size()-2; i>=0; i--){
            int tmp1 = nums[i]+i, tmp2=nums.size()-1;
            int furthesJump = min(tmp1, tmp2);
            for(int j= i+1; j<= furthesJump; j++){
                if(memo[j] == GOOD){
                    memo[i] = GOOD;
                    break;
                }
            }
        }
        return memo[0] == GOOD;
    }
};
```

还有一种更方便的贪心法，也就是我们如果能到达最近的GOOD点就代表该元素为GOOD，并更新最近GOOD点
```
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int lastPos = nums.size()-1;
        for(int i= nums.size()-2; i>=0; i--){
            if(i+nums[i] >= lastPos){
                lastPos =i;
            }
        }
        return lastPos == 0;
    }
};
```

首先采用从前到后的策列, r表示能到的最远索引：
```
        
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        r = 0
        for i, n in enumerate(nums):
            r = max(r, nums[i] +i)
            if r >= len(nums)-1:
                return True
            if r == i:
                return False
```       
还可以从后往前
```
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        last_idx = len(nums)-1
        for i in range(len(nums)-2, -1,-1):
            if i+nums[i] >= last_idx:
                last_idx = i
        return last_idx ==0
 ```
