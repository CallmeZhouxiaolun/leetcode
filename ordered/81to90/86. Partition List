Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

和数组中的双指针做法一样
```
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(!head || !head->next)
            return head;
        ListNode* dummy =new ListNode(0);
        dummy->next = head;
        ListNode* pos=dummy, *p= head, *pre =dummy;
        while(p){
            if(p->val >= x){
                pre =p;
                p = p->next;
            }
            else if(pos != pre){
                pre->next = p->next;
                p->next = pos->next;
                pos->next =p;
                p= pre->next;
                pos = pos->next;
            }
            else{
                pre =p;
                p=p->next;
                pos = pos->next;
            }
        }
        return dummy->next;
    }
};
```
