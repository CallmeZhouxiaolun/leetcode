Compare two version numbers version1 and version2.
If version1 > version2 return 1; if version1 < version2 return -1;otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.

 

Example 1:

Input: version1 = "0.1", version2 = "1.1"
Output: -1
Example 2:

Input: version1 = "1.0.1", version2 = "1"
Output: 1
Example 3:

Input: version1 = "7.5.2.4", version2 = "7.5.3"
Output: -1
Example 4:

Input: version1 = "1.01", version2 = "1.001"
Output: 0
Explanation: Ignoring leading zeroes, both “01” and “001" represent the same number “1”
Example 5:

Input: version1 = "1.0", version2 = "1.0.0"
Output: 0
Explanation: The first version number does not have a third level revision number, which means its third level revision number is default to "0"
 

Note:

Version strings are composed of numeric strings separated by dots . and this numeric strings may have leading zeroes.
Version strings do not start or end with dots, and they will not be two consecutive dots.

我们首先对上述特殊示例进行分析，Input: version1 = "1.01", version2 = "1.001"  Output: 0可以看出每一段中前0是没有用处的
Input: version1 = "1.0", version2 = "1.0.0" Output: 0 是一样的道理，虽然多了一段，但最后一段全是0 就可以被忽略了
这里添加一个没过的test: 1.2  1.10 output: -1; 提醒我对于去除前0的每一段字符串，可以先直接比较长度，然后再进行逐字符的比较
```
class Solution {
    public int compareVersion(String version1, String version2) {
        String[] array1= version1.split("\\.");
        String[] array2 = version2.split("\\.");
        int m= array1.length, n=array2.length;
        int i=0;
        while(i<m || i<n){
            String tmp1 = i<m? array1[i]:"";
            String tmp2 = i<n? array2[i]:"";
            tmp1 =deleteLeadingZeroes(tmp1);
            tmp2 =deleteLeadingZeroes(tmp2);
            if(tmp1.length()!= tmp2.length())
                return tmp1.length()- tmp2.length()>0? 1:-1;
            if(tmp1.compareTo(tmp2) >0)
                return 1;
            else if(tmp1.compareTo(tmp2) <0)
                return -1;
            else
                i++;
        }
        return 0;
    }
    public String deleteLeadingZeroes(String s){
        int m= s.length(), i=0;
        while(i<m && s.charAt(i)=='0') i++;
        return s.substring(i);
    }
}
```
