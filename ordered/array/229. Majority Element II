Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Follow-up: Could you solve the problem in linear time and in O(1) space?

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109


只能想到排序用双指针做了。。。

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> res;
        int n=nums.size();
        int left=0, right=0;
        nums.push_back(INT_MAX);
        sort(nums.begin(), nums.end());
        while(right <= n){
            if(nums[left] == nums[right]){
                right++;
            }else{
                if(right - left > n/3){
                    res.push_back(nums[left]);
                }
                left = right;
            }
        }
        return res;
    }
};



这里有摩尔投票法，分为 抵消、计数两个阶段 详解见： 
https://blog.csdn.net/u014248127/article/details/79230221?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.not_use_machine_learn_pai

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> res;
        int candidate1=0, candidate2=0, count1=0, count2=0;
        for(int num : nums){
            if(num == candidate1){
                count1++;
            }else if(num == candidate2){
                count2++;
            }else{
                if(count1 ==0){
                    candidate1 = num;
                    count1 =1;
                }else if(count2 ==0){
                    candidate2 =num;
                    count2 =1;
                }else{
                    count1--;
                    count2--;
                }
            }
        }
        count1=0, count2=0;
        for(int num :nums){
            if(num == candidate1)
                count1++;
            else if(num == candidate2)
                count2++;
        }
        if(count1 > nums.size()/3)
            res.push_back(candidate1);
        if(count2 > nums.size()/3)
            res.push_back(candidate2);
        return res;
    }
};
