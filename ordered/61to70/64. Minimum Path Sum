Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

最近几道题疯狂联系dp，增进熟练度，这里没什么可讲解的，和前两题一样，
```
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m= grid.size();
        int n= grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[0][0] = grid[0][0];
        for(int i=1; i<n; i++){
            dp[0][i] = dp[0][i-1]+ grid[0][i]; 
        }
        for(int i=1; i<m; i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
};
```

可以节省空间，采用O(n)的空间复杂度
```
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m= grid.size();
        int n= grid[0].size();
        vector<int> cur(n, grid[0][0]);
        for(int i=1; i<n; i++)
            cur[i] = cur[i-1]+grid[0][i];
        for(int i=1; i<m; i++){
            cur[0] = cur[0]+ grid[i][0];
            for(int j=1; j<n; j++){
                cur[j] = min(cur[j-1], cur[j]) + grid[i][j];
            }
        }
        return cur[n-1];
    }
};
```
