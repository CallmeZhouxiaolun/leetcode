Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

比较简单的dfs

class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> res;
        vector<int> tp;
        helper(res, tp, k, n, 1);
        return res;
    }
    void helper(vector<vector<int>>& res, vector<int>& tp, int k, int n, int start){
        if(tp.size() >k)
            return;
        if(tp.size() ==k){
            if(accumulate(tp.begin(), tp.end(), 0) ==n)
                res.push_back(tp);
            return;
        }
        for(int i=start; i<=9;i++){
            tp.push_back(i);
            helper(res,tp,k,n,i+1);
            tp.pop_back();
        }
    }
};

