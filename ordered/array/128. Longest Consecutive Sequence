Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 104
-109 <= nums[i] <= 109
 

Follow up: Could you implement the O(n) solution?


最简单的方法是排序，但这里存在一个点：数组包含重复值
因此在遍历是应该判断nums[i] == nums[i-1]，过掉重复值

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty())
            return 0;
        sort(nums.begin(), nums.end());
        int res=0, count=1;
        for(int i=1; i<nums.size(); i++){
            if(nums[i] == nums[i-1])
                continue;
            if(nums[i]-1 == nums[i-1] )
                count++;
            else{
                res = max(res, count);
                count =1;
            }
        }
        return max(res, count);
    }
};



其次我们可以采用set来保存所有的数组值，在计算序列长度时候我们只从序列的起始点开始计算
这里起始点的获取通过 num-1是否在数组中

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty())
            return 0;
        set<int> set_nums(nums.begin(), nums.end());
        int res =0;
        for(int i=0; i<nums.size(); i++){
            if(set_nums.find(nums[i]-1) == set_nums.end()){
                int cur_value = nums[i];
                int count =1;
                while(set_nums.count(cur_value+1)){
                    cur_value++;
                    count++;
                }
                res = max(res, count);
            }
        }
        return res;
    }
};



我们在进行深思，本题目的在于求数值最长连续序列，在遍历的过程中，我们会进行两种操作
1. 创建新的序列 
2. 与左/右序列进行合并
3. 作为桥梁将左右序列合并
因此，我们需要将序列进行保存，这里保存有个技巧，我们只需要存start和end两个数值即可，value为本序列的长度
因为map中我们存了起始点和终点，因此针对与每一个num，我们可以分别判断以num-1结尾、num+1开头的序列是否存在，然后进行合并

注意：在进行遍历的过程中，我们需要将每一个遍历值插入到map中，value可以随便设置（例-1）;
目的主要在于避免重复值的干扰，
why？
因为我们只存了start、end两个点，例如序列1，2，3，4，5，我们只存储了1、5；
若后续又出现3，我们按步骤查找2结尾、4开头的查找不到，因此会重复创建3的序列

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int res=0;
        unordered_map<int, int> mp;
        for(int i=0; i<nums.size(); i++){
            if(mp.find(nums[i]) == mp.end()){
                int left = mp.find(nums[i]-1) != mp.end() ? mp[nums[i]-1] :0;
                int right = mp.find(nums[i]+1) != mp.end() ? mp[nums[i]+1] :0;
                int sum = left+right+1;
                
                mp[nums[i]] = -1;
                mp[nums[i]-left] = sum;
                mp[nums[i]+right] = sum;
                res = max(res, sum);
            }
        }
        return res;
    }
};
