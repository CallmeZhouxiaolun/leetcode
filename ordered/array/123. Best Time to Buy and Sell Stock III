Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

首先做法相当于暴力法，遍历数组，以当前元素为中介点分别计算两边的最大利润，然后计算利润和的最大值
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length ==0)
            return 0;
        int n=prices.length;
        int[] max= new int[n];
        int[] second = new int[n];
        int maxProfit =0;
        for(int i=0; i< prices.length ;i++){
            max[i] = segmentProfit(prices, 0,i);
            second[i] =segmentProfit(prices, i,prices.length);
            maxProfit = Math.max(maxProfit, max[i]+ second[i]);
        }
        
        return maxProfit;
        
        
    }
    public int segmentProfit(int[] prices, int left, int right){
        if(left >= right)
            return 0;
        int maxProfit =0, min = prices[left];
        for(int i= left+1; i< right; i++){
            if(prices[i] >=min)
                maxProfit = Math.max(maxProfit, prices[i]-min);
            else
                min =prices[i];
        }
        return maxProfit;
    }
}
看到动态规划的方法 解决这一类问题：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-wen/
首先写了一下通用做法
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length ==0)
            return 0;
        int maxK=2;
        if (maxK > prices.length / 2) 
            return maxProfit_k_inf(prices);
        int[][][] dp= new int[prices.length][maxK+1][2];
        for(int i=0; i<prices.length; i++){
            for(int k =maxK; k>=1; k--){
                if(i-1 ==-1){
                    dp[i][k][0] = 0;
                    dp[i][k][1] = -prices[i];
                    continue;
                }
                dp[i][k][0] = Math.max(dp[i-1][k][0], dp[i-1][k][1] +prices[i]);
                dp[i][k][1] = Math.max(dp[i-1][k][1], dp[i-1][k-1][0] -prices[i]);
            }
        }
        return dp[prices.length -1][maxK][0];
    }
    
    public int maxProfit_k_inf(int[] prices) {
        if(prices.length ==0)
            return 0;
        int maxProfit =0;
        for(int i=1; i<prices.length ;i++){
            if(prices[i] >prices[i-1])
                maxProfit += prices[i] - prices[i-1];
        }
        return maxProfit;
    }
}

其实k=2比较小 可以直接计算

class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length ==0)
            return 0;
        int dp_i10 = 0, dp_i11=Integer.MIN_VALUE;
        int dp_i20 =0, dp_i21 =Integer.MIN_VALUE;
        for(int i=0; i<prices.length; i++){
            dp_i20 = Math.max(dp_i20, dp_i21+prices[i]);
            dp_i21 = Math.max(dp_i21, dp_i10-prices[i]);
            dp_i10 = Math.max(dp_i10, dp_i11+prices[i]);
            dp_i11 = Math.max(dp_i11, -prices[i]);
        }
        return dp_i20;
    }
}
