Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.

比较简单 two pointer:
```
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l,r =0, len(numbers)-1
        while l<r:
            if numbers[l] + numbers[r] > target:
                r-=1
            elif numbers[l] +numbers[r] < target:
                l+=1
            else:
                return [l+1,r+1]
```

采用哈希的方法：
```
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        dict_ = dict()
        for i,num in enumerate(numbers):
            if num in dict_:
                return [dict_[num], i+1]
            dict_[target-num] = i+1
```



class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int left =0, right= numbers.size()-1;
        while(left < right){
            if(numbers[left] + numbers[right] > target){
                right--;
            }else if(numbers[left] + numbers[right] < target){
                left++;
            }else{
                return {left+1, right+1};
            }
        }
        return {};
    }
};
