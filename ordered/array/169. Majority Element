Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2


解法三 摩尔投票法
1980 年由 Boyer 和 Moore 两个人提出来的算法，英文是 Boyer-Moore Majority Vote Algorithm。

算法思想很简单，但第一个想出来的人是真的强。

我们假设这样一个场景，在一个游戏中，分了若干个队伍，有一个队伍的人数超过了半数。所有人的战力都相同，不同队伍的两个人遇到就是同归于尽，同一个队伍的人遇到当然互不伤害。

这样经过充分时间的游戏后，最后的结果是确定的，一定是超过半数的那个队伍留在了最后。

而对于这道题，我们只需要利用上边的思想，把数组的每个数都看做队伍编号，然后模拟游戏过程即可。

group 记录当前队伍的人数，count 记录当前队伍剩余的人数。如果当前队伍剩余人数为 0，记录下次遇到的人的所在队伍号。

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        if not nums:
            return 0
        n , val = 0, nums[0]
        for num in nums:
            if num ==val:
                n+=1
            elif n>0:
                n-=1
            else:
                val =num
                n=1
        return val
