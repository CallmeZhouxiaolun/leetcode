Given a binary search tree and a node in it, find the in-order successor of that node in the BST.

The successor of a node p is the node with the smallest key greater than p.val.

 

Example 1:


Input: root = [2,1,3], p = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type.
Example 2:


Input: root = [5,3,6,2,4,null,null,1], p = 6
Output: null
Explanation: There is no in-order successor of the current node, so the answer is null.
 

Note:

If the given node has no in-order successor in the tree, return null.
It's guaranteed that the values of the tree are unique.

该问题即为寻找二叉搜索树中序遍历的下一个结点
这里采用Morris方法
```

class Solution:
    def inorderSuccessor(self, root: 'TreeNode', p: 'TreeNode') -> 'TreeNode':
        if not root:
            return root
        cur, flag = root, False
        while cur:
            if not cur.left:
                if flag:
                    return cur
                if cur == p:
                    flag = not flag
                cur = cur.right
            else:
                pre= cur.left
                while pre.right and pre.right != cur:
                    pre =pre.right
                if not pre.right:
                    pre.right = cur
                    cur = cur.left
                if pre.right == cur:
                    if flag:
                        return cur
                    if cur == p:
                        flag = not flag
                    cur = cur.right
        return None

```
接下来利用二叉搜索树的性质,左边小于root 右边大于root
我们的目标在于找到一个比p大的最小结点
因此,比较当前结点与p的值,若<=p.val, 向右转;  若大于p,则successor即为该结点的最左结点
```
class Solution:
    def inorderSuccessor(self, root: 'TreeNode', p: 'TreeNode') -> 'TreeNode':
        res= None
        while root:
            if root.val <= p.val:
                root = root.right
            else:
                res = root
                root = root.left
        return res
```
